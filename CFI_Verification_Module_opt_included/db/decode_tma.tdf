--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_compare 2017:10:25:18:06:53:SJ cbx_lpm_decode 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode4202w[1..0]	: WIRE;
	w_anode4211w[3..0]	: WIRE;
	w_anode4228w[3..0]	: WIRE;
	w_anode4238w[3..0]	: WIRE;
	w_anode4248w[3..0]	: WIRE;
	w_anode4258w[3..0]	: WIRE;
	w_anode4268w[3..0]	: WIRE;
	w_anode4278w[3..0]	: WIRE;
	w_anode4288w[3..0]	: WIRE;
	w_anode4300w[1..0]	: WIRE;
	w_anode4307w[3..0]	: WIRE;
	w_anode4318w[3..0]	: WIRE;
	w_anode4328w[3..0]	: WIRE;
	w_anode4338w[3..0]	: WIRE;
	w_anode4348w[3..0]	: WIRE;
	w_anode4358w[3..0]	: WIRE;
	w_anode4368w[3..0]	: WIRE;
	w_anode4378w[3..0]	: WIRE;
	w_data4200w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode4378w[3..3], w_anode4368w[3..3], w_anode4358w[3..3], w_anode4348w[3..3], w_anode4338w[3..3], w_anode4328w[3..3], w_anode4318w[3..3], w_anode4307w[3..3]), ( w_anode4288w[3..3], w_anode4278w[3..3], w_anode4268w[3..3], w_anode4258w[3..3], w_anode4248w[3..3], w_anode4238w[3..3], w_anode4228w[3..3], w_anode4211w[3..3]));
	w_anode4202w[] = ( (w_anode4202w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode4211w[] = ( (w_anode4211w[2..2] & (! w_data4200w[2..2])), (w_anode4211w[1..1] & (! w_data4200w[1..1])), (w_anode4211w[0..0] & (! w_data4200w[0..0])), w_anode4202w[1..1]);
	w_anode4228w[] = ( (w_anode4228w[2..2] & (! w_data4200w[2..2])), (w_anode4228w[1..1] & (! w_data4200w[1..1])), (w_anode4228w[0..0] & w_data4200w[0..0]), w_anode4202w[1..1]);
	w_anode4238w[] = ( (w_anode4238w[2..2] & (! w_data4200w[2..2])), (w_anode4238w[1..1] & w_data4200w[1..1]), (w_anode4238w[0..0] & (! w_data4200w[0..0])), w_anode4202w[1..1]);
	w_anode4248w[] = ( (w_anode4248w[2..2] & (! w_data4200w[2..2])), (w_anode4248w[1..1] & w_data4200w[1..1]), (w_anode4248w[0..0] & w_data4200w[0..0]), w_anode4202w[1..1]);
	w_anode4258w[] = ( (w_anode4258w[2..2] & w_data4200w[2..2]), (w_anode4258w[1..1] & (! w_data4200w[1..1])), (w_anode4258w[0..0] & (! w_data4200w[0..0])), w_anode4202w[1..1]);
	w_anode4268w[] = ( (w_anode4268w[2..2] & w_data4200w[2..2]), (w_anode4268w[1..1] & (! w_data4200w[1..1])), (w_anode4268w[0..0] & w_data4200w[0..0]), w_anode4202w[1..1]);
	w_anode4278w[] = ( (w_anode4278w[2..2] & w_data4200w[2..2]), (w_anode4278w[1..1] & w_data4200w[1..1]), (w_anode4278w[0..0] & (! w_data4200w[0..0])), w_anode4202w[1..1]);
	w_anode4288w[] = ( (w_anode4288w[2..2] & w_data4200w[2..2]), (w_anode4288w[1..1] & w_data4200w[1..1]), (w_anode4288w[0..0] & w_data4200w[0..0]), w_anode4202w[1..1]);
	w_anode4300w[] = ( (w_anode4300w[0..0] & data_wire[3..3]), enable_wire);
	w_anode4307w[] = ( (w_anode4307w[2..2] & (! w_data4200w[2..2])), (w_anode4307w[1..1] & (! w_data4200w[1..1])), (w_anode4307w[0..0] & (! w_data4200w[0..0])), w_anode4300w[1..1]);
	w_anode4318w[] = ( (w_anode4318w[2..2] & (! w_data4200w[2..2])), (w_anode4318w[1..1] & (! w_data4200w[1..1])), (w_anode4318w[0..0] & w_data4200w[0..0]), w_anode4300w[1..1]);
	w_anode4328w[] = ( (w_anode4328w[2..2] & (! w_data4200w[2..2])), (w_anode4328w[1..1] & w_data4200w[1..1]), (w_anode4328w[0..0] & (! w_data4200w[0..0])), w_anode4300w[1..1]);
	w_anode4338w[] = ( (w_anode4338w[2..2] & (! w_data4200w[2..2])), (w_anode4338w[1..1] & w_data4200w[1..1]), (w_anode4338w[0..0] & w_data4200w[0..0]), w_anode4300w[1..1]);
	w_anode4348w[] = ( (w_anode4348w[2..2] & w_data4200w[2..2]), (w_anode4348w[1..1] & (! w_data4200w[1..1])), (w_anode4348w[0..0] & (! w_data4200w[0..0])), w_anode4300w[1..1]);
	w_anode4358w[] = ( (w_anode4358w[2..2] & w_data4200w[2..2]), (w_anode4358w[1..1] & (! w_data4200w[1..1])), (w_anode4358w[0..0] & w_data4200w[0..0]), w_anode4300w[1..1]);
	w_anode4368w[] = ( (w_anode4368w[2..2] & w_data4200w[2..2]), (w_anode4368w[1..1] & w_data4200w[1..1]), (w_anode4368w[0..0] & (! w_data4200w[0..0])), w_anode4300w[1..1]);
	w_anode4378w[] = ( (w_anode4378w[2..2] & w_data4200w[2..2]), (w_anode4378w[1..1] & w_data4200w[1..1]), (w_anode4378w[0..0] & w_data4200w[0..0]), w_anode4300w[1..1]);
	w_data4200w[2..0] = data_wire[2..0];
END;
--VALID FILE
